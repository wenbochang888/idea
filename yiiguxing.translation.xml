<application>
  <component name="AppStorage">
    <option name="maxHistorySize" value="20" />
    <histories>
      <item value="CREATOR" />
      <item value="Only for testing to reset the provider instance." />
      <item value="fix" />
      <item value="put If Absent" />
      <item value="Absent" />
      <item value="only rarely an appropriate alternative to {@code compareAndSet}." />
      <item value="&lt;p&gt;&lt;a href=&quot;package-summary.htmlweakCompareAndSet&quot;&gt;May fail spuriously and does not provide ordering guarantees&lt;a&gt;, so is only rarely an appropriate alternative to {@code compareAndSet}." />
      <item value="spuriously" />
      <item value="alternative" />
      <item value="does" />
      <item value="violating" />
      <item value="integral" />
      <item value="idle" />
      <item value="concise" />
      <item value="&lt;p&gt;Since Spring 4.1, the standard {@link javax.annotation.Priority} annotation can be used as a drop-in replacement for this annotation in ordering scenarios. Note that {@code @Priority} may have additional semantics when a single element has to be picked (see {@link AnnotationAwareOrderComparatorgetPriority}). &lt;p&gt;Alternatively, order values may also be determined on a per-instance basis through the {@link Ordered} interface, allowing for configuration-determined instance values instead of hard-coded values attached to a particular class. &lt;p&gt;Consult the javadoc for {@link org.springframework.core.OrderComparator OrderComparator} for details on the sort semantics for non-ordered objects." />
      <item value="&lt;p&gt;&lt;b&gt;NOTE:&lt;b&gt; Since Spring 4.0, annotation-based ordering is supported for many kinds of components in Spring, even for collection injection where the order values of the target components are taken into account (either from their target class or from their {@code @Bean} method). While such order values may influence priorities at injection points, please be aware that they do not influence singleton startup order which is an orthogonal concern determined by dependency relationships and {@code @DependsOn} declarations (influencing a runtime-determined dependency graph)." />
      <item value="escalate" />
      <item value="* Return whether this bean should be lazily initialized, i.e. not * eagerly instantiated on startup. Only applicable to a singleton bean." />
      <item value="applicable" />
      <item value="Transient" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="105" />
        <entry key="ENGLISH" value="106" />
        <entry key="DANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1633919908581" />
  </component>
  <component name="Settings">
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20211011000969697" />
      </app-key>
    </option>
    <option name="translator" value="BAIDU" />
  </component>
</application>